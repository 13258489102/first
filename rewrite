#include<stdio.h>
#include<stdlib.h>
#define M 20
typedef struct node
{
	char data;
	struct node* lchild, * rchild;
}BTNode;
void CreatBTree(BTNode*& b, char* ch)
{
	int j = 0, k = 1, top = -1;
	BTNode* p,*St[M];
	char str=ch[j];
	while (str != '\0')
	{
		switch (str)
		{
		case '(':top++; St[top] = p; k = 1; break;
		case ')':top--; break;
		case ',':k = 2; break;
		default:p = (BTNode*)malloc(sizeof(BTNode));
			p->data = str;
			p->lchild = p->rchild = NULL;
			if (b == NULL)
				b = p;
			else
			{
				switch (k)
				{
				case 1:St[top]->lchild = p; break;
				case 2:St[top]->rchild = p; break;
				}

			}
		}
		j++;
		str=ch[j];
	}

}
void PreOrder(BTNode*b)
{
	if(b!=NULL)
	{
		printf("%c",b->data);
		PreOrder(b->lchild);
		PreOrder(b->rchild);
	}
}
int main()
{
	BTNode* b=NULL;//必须为空，不然后面判断时会出错。 
	char ch[M] = "A(B(D(,G))C(E,F))";
	/*char ch[M];
	scanf_s("%s", ch);*/
	CreatBTree(b, ch);
	PreOrder(b);
	return 0;
}
